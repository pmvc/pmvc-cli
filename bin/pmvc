#!/usr/bin/env php
<?php namespace PMVC;

# debug
ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);
ini_set('display_startup_errors', true);
$cli = new PMVC_GLOBAL_CLI();
if ($cli->checkDependency()) {
    $cli->init();
}

class PMVC_GLOBAL_CLI
{
    private $dir;
    private $dotenv = [];

    public function checkDependency()
    {
        return $this->findAutoload() && $this->hasPMVC() && $this->initPlugin();
    }

    private function findAutoload()
    {
        $dir = realpath('./');
        $file = $dir . '/vendor/autoload.php';
        if (!is_file($file)) {
            $dirs = explode('/', $dir);
            while (!is_file($file) && count($dirs)) {
                array_pop($dirs);
                $dir = join('/', $dirs);
                $file = $dir . '/vendor/autoload.php';
            }
        }
        if (is_file($file)) {
            include $file;
            $this->dir = $dir;
            return true;
        } else {
            return !trigger_error('Can\'t find autoload file.', E_USER_ERROR);
        }
    }

    private function hasPMVC()
    {
        if (class_exists(__NAMESPACE__ . '\Load')) {
            return true;
        } else {
            return !trigger_error(
                'You need install PMVC core library in app level.',
                E_USER_ERROR
            );
        }
    }

    private function initPlugin()
    {
        Load::plug();
        $plugs = [
            'controller' => null,
            'dispatcher' => null,
            'default_forward' => null,
            'cli' => null,
        ];
        addPlugInFolders([__DIR__ . '/../../../pmvc-plugin']);
        $init = initPlugin($plugs, true);
        foreach ($init as $k => $plug) {
            if (!$plug) {
                return !trigger_error(
                    '[Plugin: ' . $k . '] not installed.',
                    E_USER_ERROR
                );
            }
        }
        initPlugin($plugs);
        $optionPlugin = [
            'debug' => ['output' => 'debug_cli'],
            'dev' => null,
            'error' => null,
        ];
        $init = initPlugin($optionPlugin, true);
        foreach ($init as $k => $plug) {
            if (!$plug) {
                unset($optionPlugin[$k]);
            }
        }
        initPlugin($optionPlugin);
        return true;
    }

    private function dump($s)
    {
        $cmd = plug('cli');
        $cmd->dump($s);
    }

    private function parseParams()
    {
        $cmd = plug('cli');
        $params = $cmd->getopt();
        $cook = (object) [
            'help' => get($params, 'help', get($params, 'h', false)),
            'index' => get($params, 'i', 'index_cli'),
            'view' => get($params, 'v', 'cli'),
            'trace' => get($params, 't', false),
            'template' => get($params, 'tpl'),
            'welcome' => !((bool) get($params, 'q', false)),
        ];
        return $cook;
    }

    private function welcome()
    {
        $this->dump('Workplace: ' . $this->dir);
        $this->dump('DotEnv: ' . implode(', ', $this->dotenv));
    }

    private function handleInput($input)
    {
        $pDebug = plug('debug');
        if ($input->trace) {
            if (is_numeric($input->trace)) {
                $pDebug['traceLength'] = $input->trace;
                $input->trace = 'trace';
            }
            if (is_bool($input->trace)) {
                $input->trace = 'trace';
            }
            $pDebug->setLevel($input->trace);
        }
        if ($input->help) {
            if (!$input->trace || $input->trace === 'trace') {
                $merge = array_diff(
                    ['help', $input->help, $input->trace],
                    [false, '', null, true]
                );
                $pDebug->setLevel(join(',', $merge));
            }
        }
        if ($input->template) {
            option('set', _TEMPLATE_DIR, $input->template);
        }
    }

    public function init()
    {
        /**
         * Dot Env
         */
        $dir = realpath($this->dir);
        $cliEnv = $dir . '/.env.cli';
        if (realpath($cliEnv)) {
            $this->dotenv[] = $cliEnv;
        }
        $dotenv = $dir . '/.env.pmvc';
        if (realpath($dotenv)) {
            $this->dotenv[] = $dotenv;
        }
        if (count($this->dotenv)) {
            $dotenv = plug('dotenv');
            foreach ($this->dotenv as $envfile) {
                $dotenv->toPMVC($envfile);
            }
        }

        $parent = getOption(_RUN_APPS);
        $parent = str_replace(['..', '.'], [$dir, $dir], $parent);
        $input = $this->parseParams();
        $this->handleInput($input);

        $controller = plug('controller');
        option('set', [
            _ROUTER => 'cli',
            _VIEW_ENGINE => $input->view,
            _RUN_APPS => $parent,
        ]);
        $pluginKey = getOption(_PLUGIN);
        if (!empty($pluginKey)) {
            $plugins = getOption($pluginKey, []);
            initPlugin(\PMVC\get($plugins, 'INIT', []));
        }
        if (!$input->help) {
            if ($input->welcome) {
                $this->welcome();
            }
            if ($controller->plugApp([], [], $input->index)) {
                if ($input->index === 'worker') {
                    $controller->processWorker();
                } else {
                    $controller->process();
                }
            }
        }
    }
}
