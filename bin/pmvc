#!/usr/bin/env php
<?php namespace PMVC;

use Exception;

# debug
ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);
ini_set('display_startup_errors', true);
$cli = new PMVC_GLOBAL_CLI();
if ($cli->checkDependency()) {
    $cli->init();
}

class PMVC_GLOBAL_CLI
{
    private $dir;
    private $dotenv = [];
    private $_autoload;
    private $_units;

    public function checkDependency()
    {
        return $this->findAutoLoad() && $this->hasPMVC() && $this->initPlugin();
    }

    private function tryAutoLoad($dir)
    {
        $file = $dir . '/vendor/autoload.php';
        $tryFiles = [$file];
        if (!is_file($file)) {
            $dirs = explode('/', $dir);
            while (!is_file($file) && count($dirs) > 1) {
                array_pop($dirs);
                $dir = join('/', $dirs);
                $file = $dir . '/vendor/autoload.php';
                $tryFiles[] = $file;
            }
        }
        return [$tryFiles, $file];
    }

    private function findAutoLoad()
    {
        $dirs = [realpath('./'), __DIR__];
        $tryFiles = [];
        foreach ($dirs as $dir) {
            $tryResult = $this->tryAutoLoad($dir);
            $file = $tryResult[1];
            $tryFiles = array_merge($tryFiles, $tryResult[0]);
            if (is_file($file)) {
                break;
            }
        }
        if (is_file($file)) {
            $this->_autoload = $file;
            include $file;
            $this->dir = $dir;
            return true;
        } else {
            return !trigger_error(
                'Can\'t find autoload file. ' . print_r($tryFiles, true),
                E_USER_ERROR
            );
        }
    }

    private function hasPMVC()
    {
        if (class_exists(__NAMESPACE__ . '\Load')) {
            return true;
        } else {
            return !trigger_error(
                'You need install PMVC core library in app level.',
                E_USER_ERROR
            );
        }
    }

    private function initPlugin()
    {
        Load::plug();
        $plugs = [
            'dispatcher' => null,
            'default_forward' => null,
            'cli' => null,
        ];
        addPlugInFolders([__DIR__ . '/../../../pmvc-plugin']);
        $init = initPlugin($plugs, true);
        foreach ($init as $k => $plug) {
            if (!$plug) {
                return !trigger_error(
                    '[Plugin: ' . $k . '] not installed.',
                    E_USER_ERROR
                );
            }
        }
        initPlugin($plugs);
        $optionalPlugin = [
            'debug' => ['output' => 'debug_cli'],
            'dev' => null,
            'error' => null,
        ];
        $init = initPlugin($optionalPlugin, true);
        foreach ($init as $k => $plug) {
            if (!$plug) {
                unset($optionalPlugin[$k]);
            }
        }
        initPlugin($optionalPlugin);
        return true;
    }

    private function dump($s)
    {
        $cmd = plug('cli');
        $cmd->dump($s);
    }

    private function _glob($folder, $pattern)
    {
        $dir = glob($folder . '/*', GLOB_ONLYDIR);
        $fileList = [];
        foreach ($dir as $d) {
            if (fnmatch($pattern, $d)) {
                $fileList[] = $d;
            } else {
                if (!is_link($d)) {
                    if (
                        !fnmatch('*/vendor', $d) &&
                        !fnmatch('*/node_modules', $d) &&
                        !fnmatch('*/dev', $d)
                    ) {
                        $other = $this->_glob($d, $pattern);
                        if (count($other)) {
                            $fileList = array_merge($fileList, $other);
                        }
                    }
                }
            }
        }
        return $fileList;
    }

    private function genUnitCommand($testDir)
    {
        $inc = $testDir . '/include.php';
        $opt = ['--prepend ' . $this->_autoload];
        if (is_file($inc)) {
            $opt[] = '--bootstrap ' . $inc;
        }
        $opt[] = $testDir;
        return '[PHPUNIT] ' . join(' ', $opt);
    }

    private function getDefaultTestRunner()
    {
        $dir = realpath('./');
        $testDir = $dir . '/tests';
        $unitConfigFile = $dir . '/phpunit.xml';
        if (is_file($unitConfigFile)) {
            $this->_units = array_diff($this->_glob($dir, '*/tests'), [
                $testDir,
            ]);
            return '[PHPUNIT]';
        } else {
            if (is_dir($testDir)) {
                return $this->genUnitCommand($testDir);
            } else {
                throw new Exception('Not found [tests] folder.');
            }
        }
    }

    private function _runUnit($unitCmd, $bin)
    {
        $cmd = str_replace('[PHPUNIT]', $bin, $unitCmd);
        $this->dump($cmd);
        system($cmd);
    }

    private function parseParams()
    {
        $cmd = plug('cli');
        $params = $cmd->getopt();
        $cook = (object) [
            'help' => get($params, 'help', get($params, 'h', false)),
            'index' => get($params, 'run', get($params, 'r', 'index_cli')),
            'view' => get($params, 'v', 'cli'),
            'trace' => get($params, 't', false),
            'template' => get($params, 'tpl'),
            'welcome' => !((bool) get($params, 'q', false)),
            'unit' => get($params, 'unit', 'phpunit'),
        ];
        return $cook;
    }

    private function welcome()
    {
        $this->dump('Workplace: ' . $this->dir);
        $this->dump('DotEnv: ' . implode(', ', $this->dotenv));
    }

    private function handleInput($input)
    {
        $pDebug = plug('debug');
        if ($input->trace) {
            if (is_numeric($input->trace)) {
                $pDebug['traceLength'] = $input->trace;
                $input->trace = 'trace';
            }
            if (is_bool($input->trace)) {
                $input->trace = 'trace';
            }
            $pDebug->setLevel($input->trace);
        }
        if ($input->help) {
            if (!$input->trace || $input->trace === 'trace') {
                $merge = array_diff(
                    ['help', $input->help, $input->trace],
                    [false, '', null, true]
                );
                $pDebug->setLevel(join(',', $merge));
            }
        }
        if ($input->template) {
            option('set', _TEMPLATE_DIR, $input->template);
        }
    }

    private function _initDotEnv()
    {
        /**
         * Dot Env
         */
        $dir = realpath($this->dir);
        $cliEnv = $dir . '/.env.cli';
        if (realpath($cliEnv)) {
            $this->dotenv[] = $cliEnv;
        }
        $dotenv = $dir . '/.env.pmvc';
        if (realpath($dotenv)) {
            $this->dotenv[] = $dotenv;
        }
        if (count($this->dotenv)) {
            $dotenv = plug('dotenv');
            foreach ($this->dotenv as $envfile) {
                $dotenv->toPMVC($envfile);
            }
        }
        $pluginKey = getOption(_PLUGIN);
        if (!empty($pluginKey)) {
            $plugins = getOption($pluginKey, []);
            $initPlugNames = \PMVC\get($plugins, 'INIT', []);
            $initPlugInArr = [];
            foreach ($initPlugNames as $plugName) {
                $plugV = \PMVC\get($plugins, $plugName);
                $initPlugInArr[$plugName] = empty($plugV) ? null : $plugV;
            }
            initPlugin($initPlugInArr);
        }
        return $dir;
    }

    public function init()
    {
        $dir = $this->_initDotEnv();
        $parent = getOption(_RUN_APPS);
        $parent = str_replace(['..', '.'], [$dir, $dir], $parent || '');
        $input = $this->parseParams();
        $this->handleInput($input);

        if (!$input->help) {
            if ($input->index === 'test') {
                $unitCmd = $this->getDefaultTestRunner();
                $this->_runUnit($unitCmd, $input->unit);
                if (is_array($this->_units) && count($this->_units)) {
                    foreach ($this->_units as $u) {
                        $unitCmd = $this->genUnitCommand($u);
                        $this->_runUnit($unitCmd, $input->unit);
                    }
                }
            } else {
                if ($input->welcome) {
                    $this->welcome();
                }
                option('set', [
                    _ROUTER => 'cli',
                    _VIEW_ENGINE => $input->view,
                    _RUN_APPS => $parent,
                ]);
                $controller = plug('controller');
                if ($controller->plugApp([], [], $input->index)) {
                    if ($input->index === 'worker') {
                        $controller->processWorker();
                    } else {
                        $controller->process();
                    }
                }
            }
        }
    }
}
