#!/usr/bin/env php
<?php
namespace PMVC;

use PMVC\Event;

# debug
ini_set("error_reporting", E_ALL);
ini_set("display_errors", true);
ini_set("display_startup_errors", true);
$cli = new PmvcGlobalCli();
if ($cli->findAutoload()) {
    $cli->init();
}

class PmvcGlobalCli
{
    private $dir;
    private $dotenv;

    public function findAutoload()
    {
        $dir = realpath('./');
        $file = $dir.'/vendor/autoload.php';
        if (!is_file($file)) {
            $dirs = explode('/',$dir);
            while(!is_file($file)&&count($dirs)){
                array_pop($dirs);
                $dir = join('/',$dirs);
                $file = $dir.'/vendor/autoload.php';
            }
        }
        if (is_file($file)) {
            include($file);
            $this->dir = $dir;
            return true;
        } else {
            echo 'Can\'t find autoload file'."\n";
            return false;
        }
    }

    public function dump($s)
    {
        $cmd = plug('cli');
        $cmd->dump($s);
    }

    public function init()
    {
        $this->initPlugin();
        /*
         * Dot Env
         */
        $dir = realpath($this->dir);
        $dotenv = $dir.'/.env';
        if (realpath($dotenv)) {
            $this->dotenv = $dotenv;
            plug('dotenv', ['envFile'=>$dotenv]);
        }
        $parent = getOption(_RUN_APPS);
        $parent = str_replace(['..','.'],[$dir,$dir],$parent);
        $input = $this->parseParams();
        if ($input->trace) {
            plug('debug_cli')['level']='trace';
        }

        $controller = plug('controller');
        \PMVC\option('set',[
           _ROUTER      => 'cli',
           _VIEW_ENGINE => $input->view,
           _RUN_APPS    => $parent
        ]);
        $cliEnv = $dir.'/.env.cli';
        if (realpath($cliEnv)) {
            plug('dotenv')->toPMVC($cliEnv);
        }
        $plugins = getOption(_PLUGIN);
        if (!empty($plugins)) {
            initPlugin($plugins);
            option('set', _PLUGIN, null);
        }
        $this->welcome();
        if ($controller->plugApp([], [], $input->index)){
            $controller->process();
        }
    }

    public function initPlugin()
    {
        Load::plug();
        $plugs = [
            'controller'=>null,
            'dispatcher'=>null,
            'default_forward'=>null,
            'cli'=>null,
        ];
        addPlugInFolders([__DIR__.'/../../../pmvc-plugin']);
        $init = initPlugin($plugs,true);
        foreach($init as $k=>$plug){
            if (!$plug) {
                return !trigger_error('[Plugin: '.$k.'] not installed.');
            }
        }
        initPlugin($plugs);
        $optionPlugin = [
            'dev'=>null,
            'error'=>null,
            'debug'=>['output'=>'debug_cli'],
        ];
        $init = initPlugin($optionPlugin,true);
        foreach($init as $k=>$plug){
            if ($plug) {
                plug($k, $optionPlugin[$k]);
            }
        }
    }

    public function parseParams()
    {
        $cmd = plug('cli');
        $params = (object)$cmd->getopt();
        $default = (object)[
            'index'=>'index_cli',
            'view'=>'cli',
            'trace'=>false
        ];
        if (isset($params->i)) {
            $default->index = $params->i;
        }
        if (isset($params->v)) {
            $default->view = $params->v;
        }
        if (isset($params->t)) {
            $default->trace = true;
        }
        return $default;
    }

    public function welcome()
    {
        $this->dump('Workplace: '.$this->dir);
        $this->dump('DotEnv: '.$this->dotenv);
    }
}
